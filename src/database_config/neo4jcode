MATCH (p:Paper)
SET p.race = false, p.racism = false, p.covid = false, p.msm

CREATE INDEX race_index
FOR (p:Paper)
ON (p.race);

CREATE INDEX racism_index
FOR (p:Paper)
ON (p.racism);

CREATE INDEX covid_index
FOR (p:Paper)
ON (p.covid);


############

:auto LOAD CSV WITH HEADERS FROM
'file:///racism_papers.csv' as row
MERGE (m:Paper {id: toInteger(row.id)})
ON CREATE SET
m.title = row.title,
m.year = toInteger(row.year),
m.racism = true;

:auto LOAD CSV WITH HEADERS FROM
'file:///covid_papers.csv' as row
MERGE (m:Paper {id: toInteger(row.id)})
ON CREATE SET
m.title = row.title,
m.year = toInteger(row.year),
m.covid = true;

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///racism_authors.csv' as row
MERGE (m:Author {name: row.author});

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///covid_authors.csv' as row
MERGE (m:Author {name: row.author});

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///racism_paper_author_edges.csv' as row
MATCH (author:Author {name: row.author})
MATCH (paper:Paper {id: toInteger(row.paper)})
MERGE (author)-[:WROTE]->(paper);

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///covidpaper_author_edges.csv' as row
MATCH (author:Author {name: row.author})
MATCH (paper:Paper {id: toInteger(row.paper)})
MERGE (author)-[:WROTE]->(paper);

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///racism_paper_paper_edges.csv' as row
MATCH (from:Paper {id: toInteger(row.from)})
MATCH (to:Paper {id: toInteger(row.to)})
MERGE (from)-[:CITED]->(to);

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///covid_paper_paper_edges.csv' as row
MATCH (from:Paper {id: toInteger(row.from)})
MATCH (to:Paper {id: toInteger(row.to)})
MERGE (from)-[:CITED]->(to);



MATCH (a:Author)-[:WROTE]-(p:Paper)-[:WROTE]-(b:Author)
WITH a, b, count(*) as count
MERGE (a)-[:CO_AUTH]-(b)

MATCH (a:Author)-[:WROTE]-(:Paper)-[:CITED]->(:Paper)-[:WROTE]-(b:Author)
WITH a, b, count(*) as count
MERGE (a)-[:CITED_AUTH {weight: count}]->(b)

CALL gds.articleRank.write({nodeProjection: 'Author',
relationshipProjection: 'CITED_AUTH',relationshipProperties: 'weight',
writeProperty: 'pagerank_citations', relationshipWeightProperty: 'weight'})

CALL gds.beta.modularityOptimization.write({nodeProjection: 'Author',
relationshipProjection: 'CO_AUTH',
writeProperty: 'auth_community', relationshipWeightProperty: 'weight'})
YIELD communityCount
RETURN communityCount

MATCH ()-[a:CO_AUTH]-()
DELETE a

MATCH ()-[a:CITED_AUTH]-()
DELETE a