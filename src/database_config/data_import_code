bin/neo4j-admin import 

--database=live_database 

--nodes=import/papers_headers.csv,import/papers.csv 
--nodes=import/authors_headers.csv,import/authors.csv 
--nodes=import/investigator_nodes_headers.csv,import/investigator_nodes.csv 
--nodes=import/project_nodes_headers.csv,import/project_nodes.csv
--nodes=import/organization_nodes_headers.csv,import/organization_nodes.csv

--relationships=import/author_paper_edges_headers.csv,import/author_paper_edges.csv
--relationships=import/investigator_project_edges_headers.csv,import/investigator_project_edges.csv
--relationships=import/organization_project_edges_headers.csv,import/organization_project_edges.csv
--relationships=import/project_subproject_edges_headers.csv,import/project_subproject_edges.csv
--relationships=import/citation_edges_headers.csv,import/citation_edges.csv


sudo -u neo4j neo4j-admin import --database=neo4j --nodes=/var/lib/neo4j/import/papers_headers.csv,/var/lib/neo4j/import/papers.csv --nodes=/var/lib/neo4j/import/authors_headers.csv,/var/lib/neo4j/import/authors.csv --nodes=/var/lib/neo4j/import/investigator_nodes_headers.csv,/var/lib/neo4j/import/investigator_nodes.csv --nodes=/var/lib/neo4j/import/project_nodes_headers.csv,/var/lib/neo4j/import/project_nodes.csv --nodes=/var/lib/neo4j/import/organization_nodes_headers.csv,/var/lib/neo4j/import/organization_nodes.csv --relationships=/var/lib/neo4j/import/author_paper_edges_headers.csv,/var/lib/neo4j/import/author_paper_edges.csv --relationships=/var/lib/neo4j/import/investigator_project_edges_headers.csv,/var/lib/neo4j/import/investigator_project_edges.csv --relationships=/var/lib/neo4j/import/organization_project_edges_headers.csv,/var/lib/neo4j/import/organization_project_edges.csv --relationships=/var/lib/neo4j/import/project_subproject_edges_headers.csv,/var/lib/neo4j/import/project_subproject_edges.csv --relationships=/var/lib/neo4j/import/citation_edges_headers.csv,/var/lib/neo4j/import/citation_edges.csv


neo4j_query(
  con = list(address = NULL, uid = NULL, pwd = NULL),
  qry = NULL,
  shell_path = "cypher-shell",
  database = NULL,
  encryption = c("default", "true", "false")
)

new password: crack-avatar-gallery-bravo-spell-6800

CREATE CONSTRAINT UniquePaperIdConstraint IF NOT EXISTS
ON (p:Paper)
ASSERT p.id IS UNIQUE;

CREATE CONSTRAINT UniqueAuthorIdConstraint IF NOT EXISTS
ON (a:Author)
ASSERT a.name IS UNIQUE;

CREATE CONSTRAINT UniqueInvestigatorIdConstraint IF NOT EXISTS
ON (a:Investigator)
ASSERT a.id IS UNIQUE;

CREATE CONSTRAINT UniqueProjectIdConstraint IF NOT EXISTS
ON (a:Project)
ASSERT a.id IS UNIQUE;

CREATE CONSTRAINT UniqueOrganizationIdConstraint IF NOT EXISTS
ON (a:Organization)
ASSERT a.id IS UNIQUE;



CREATE INDEX year_index IF NOT EXISTS
FOR (p:Paper)
ON (p.year);

CREATE INDEX project_key_index IF NOT EXISTS
FOR (p:Paper)
ON (p.project_key);

CREATE INDEX direct_cost_index IF NOT EXISTS
FOR (p:Project)
ON (p.direct_cost);

CREATE INDEX indirect_cost_index IF NOT EXISTS
FOR (p:Project)
ON (p.indirect_cost);

CREATE INDEX total_cost_index IF NOT EXISTS
FOR (p:Project)
ON (p.total_cost);

CREATE INDEX total_cost_subproject_index IF NOT EXISTS
FOR (p:Project)
ON (p.total_cost_subproject);


CREATE FULLTEXT INDEX NameFulltextIndex IF NOT EXISTS
FOR (n:Author) ON EACH [n.name];

CREATE FULLTEXT INDEX InvestigatorNametextIndex IF NOT EXISTS
FOR (n:Investigator) ON EACH [n.name];

CREATE FULLTEXT INDEX AbstractSearch IF NOT EXISTS
FOR (n:Paper) ON EACH [n.abstract];





############ Papers

LOAD CSV FROM
'file:///papers.csv' as row
MERGE (m:Paper {id: row.id})
ON CREATE SET
m.title = row.title,
m.abstract = row.abstract,
m.journal_id = row.journal_id,
m.journal_title = row.journal_title,
m.mesh_desc_major = row.mesh_desc_major,
m.mesh_desc_nonmajor = row.mesh_desc_nonmajor,
m.mesh_qual_major = row.mesh_qual_major,
m.mesh_qual_major = row.mesh_qual_major,
m.mesh_qual_nonmajor = row.mesh_qual_nonmajor ;

:auto using periodic commit
 LOAD CSV FROM
'file:///papers.csv' as row
WITH row LIMIT 0
MERGE (m:Paper {id: row[0]})
ON CREATE SET
title = row[1],
abstract = row[2],
journal_id = row[3],
journal_title = row[4],
year = toInteger(row[5]),
mesh_desc_major = row[6],
mesh_desc_nonmajor = row[7],
mesh_qual_major = row[8],
mesh_qual_nonmajor = row[9];



############ Authors

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///authors.csv' as row
MERGE (m:Author {name: row.name_author});

:auto using periodic commit
LOAD CSV FROM
'file:///authors.csv' as row
CREATE (a:Author {name: row[0]});

############ Investigators

:auto using periodic commit
PROFILE LOAD CSV FROM
'file:///investigator_nodes.csv' as row
WITH row LIMIT 0
MERGE (m:Investigator {id: row[0]})
ON CREATE SET
m.name = row[1];

############ Projects

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///project_nodes.csv' as row
MERGE (m:Project {id: row.id_project})
ON CREATE SET
m.title = row.title,
m.year = toInteger(row.year),
m.indirect_cost = toInteger(row.indirect_cost),
m.direct_cost = toInteger(row.direct_cost),
m.total_cost = toInteger(row.total_cost),
m.total_cost_subproject = toInteger(row.subproject);


:auto using periodic commit
LOAD CSV FROM
'file:///project_nodes.csv' as row
MERGE (m:Project)
ON CREATE SET
m.id = row[0],
m.title = row[1],
m.year = toInteger(row[2]),
m.indirect_cost = toInteger(row[3]),
m.direct_cost = toInteger(row[4]),
m.total_cost = toInteger(row[5]),
m.total_cost_subproject = toInteger(row[6]);


############ Organizations

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///organization_nodes.csv' as row
MERGE (m:Organization {id: row.id_organization})
SET
m.name = row.name_organization,
m.city = row.city_organization;


:auto using periodic commit
PROFILE LOAD CSV FROM
'file:///organization_nodes.csv' as row
CREATE (m:Organization {id: row[0], name: row[1], city: row[2]});



############ Authors and Papers

:auto using periodic commit
LOAD CSV FROM
'file:///author_paper_edges.csv' as row
MATCH (author:Author) WHERE author.name = row[1]
MATCH (paper:Paper) WHERE paper.id = row[0] 
MERGE (author)-[:WROTE]->(paper);

############ Investigators and Projects

:auto using periodic commit
LOAD CSV FROM
'file:///investigator_project_edges.csv' as row
WITH row LIMIT 0
MATCH (i:Investigator) WHERE i.id = row[0]
MATCH (p:Project) WHERE p.id = row[1]
MERGE (i)-[:LED]->(p);

############ Organizations and Projects

:auto using periodic commit
LOAD CSV FROM
'file:///organization_project_edges.csv' as row
MATCH (o:Organization) WHERE o.id = row.id_organization
MATCH (p:Project) WHERE p.id = row.id_project
MERGE (o)-[:HOSTED]->(p);

:auto using periodic commit
LOAD CSV FROM
'file:///organization_project_edges.csv' as row
MATCH (o:Organization) WHERE o.id = row[0]
MATCH (p:Project) WHERE p.id = row[1]
MERGE (o)-[:HOSTED]->(p);

############ Project and Paper

LOAD CSV WITH HEADERS FROM
'file:///project_paper_edges.csv' as row
MATCH (p:Paper) WHERE p.id = row.id_paper
SET p.project_key = row.id_project + '_' + p.year + '_0';

MATCH (p:Project), (q:paper)
WHERE p.id = q.project_key
MERGE (p)-[:SUPPORTED]->(q);


LOAD CSV WITH HEADERS FROM
'file:///project_paper_edges.csv' as row
MATCH (p:Paper) WHERE p.id = row.id_paper
MATCH (q:Project) WHERE q.id = row.id_project + '_' + p.year + '_0';


############ Project and SubProject

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///project_subproject_edges.csv' as row
MATCH (o:Project) WHERE o.id = row.id_project
MATCH (p:Project ) WHERE p.id = row.id_subproject
MERGE (o)-[:BEGAT]->(p);

:auto using periodic commit
LOAD CSV FROM
'file:///project_subproject_edges.csv' as row
MATCH (o:Project) WHERE o.id = row[1]
MATCH (p:Project ) WHERE p.id = row[0]
MERGE (o)-[:BEGAT]->(p);




############ Paper Paper Citations

:auto using periodic commit
LOAD CSV WITH HEADERS FROM
'file:///citation_edges.csv' as row
MATCH (from:Paper {id: row[1]]})
MATCH (to:Paper {id: row[0]})
MERGE (from)-[:CITED]->(to);

############ Coauthoring Communities


CALL gds.graph.create.cypher(
  'collaborationNetwork',
  'MATCH (n:Author) RETURN id(n) AS id, labels(n) AS labels',
  'MATCH (a:Author)-[:WROTE]->(b:Paper)<-[:WROTE]-(b:Author)
    RETURN id(a) AS source, id(b) AS target, count(b) as weight'
)
YIELD
  graphName AS graph, nodeCount AS nodes, relationshipCount AS rels;


CALL gds.labelPropagation.write('collaborationNetwork', { writeProperty: 'community' })
YIELD communityCount, ranIterations, didConverge;

CALL gds.graph.drop('collaborationNetwork');

############ Citation Practices


CALL gds.graph.create.cypher(
  'citationNetwork',
  'MATCH (n:Author) RETURN id(n) AS id, labels(n) AS labels',
  'MATCH (a:Author)-[:WROTE]-(p:Paper)-[:CITED]->(:Paper)-[:WROTE]-(b:Author)
    RETURN id(a) AS source, id(b) AS target, count(p) as weight'
)
YIELD
  graphName AS graph, nodeCount AS nodes, relationshipCount AS rels;

CALL gds.articleRank.write('citationNetwork', {
  writeProperty: 'auth_pagerank'
})
YIELD nodePropertiesWritten, ranIterations;

CALL gds.graph.drop('citationNetwork');






