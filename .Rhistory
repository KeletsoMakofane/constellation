dplyr::mutate(name_organization = first_valid(name_organization), city_organization = first_valid(city_organization), city_country = first_valid(city_country)) %>%
dplyr::ungroup() %>%
dplyr::group_by(name_organization) %>%
dplyr::mutate(id_organization = first_valid(id_organization),
city_organization = first_valid(city_organization),
city_country = first_valid(city_country)) %>%
dplyr::ungroup() %>%
dplyr::mutate(name_organization = ifelse(is.na(name_organization), id_organization, name_organization),
id_organization = ifelse(is.na(id_organization), digest::digest2int(as.character(id_organization)), id_organization))
}
get_organization_nodes <- function(organization_and_project_info){
organization_and_project_info %>%
dplyr::select(id_organization, name_organization, city_organization) %>%
dplyr::group_by(id_organization) %>%
dplyr::summarize(name_organization = first_valid(name_organization), city_organization = first_valid(city_organization) )
}
get_organization_project_edges <- function(organization_and_project_info){
organization_and_project_info %>%
dplyr::select(id_organization, id_project) %>%
drop_na() %>%
dplyr::filter(id_organization != "NA" & id_organization != "" & id_project != "NA" & id_project != "") %>%
unique()
}
get_project_sub_project_edges <- function(file_project){
file_project %>%
dplyr::select(id_project, core_project_number, year) %>%
dplyr::mutate(id_subproject = paste(core_project_number, year, "0", sep = "_")) %>%
unique() %>%
dplyr::filter(id_project != id_subproject) %>%
dplyr::select(id_project, id_subproject)
}
get_project_paper_edges <- function(file_links){
file_links %>%
dplyr::rename(id_paper = PMID, id_project = PROJECT_NUMBER)
}
download_and_clean_data_links <- function(i){
download.file(file_directory_links[i]   , paste0(storage.data.directory, "link_file_"   , i, ".zip"))
try({file_links                  <- read_csv(paste0(storage.data.directory, "link_file_"   , i, ".zip"))})
try({project_paper_edges         <- get_project_paper_edges(file_links)})
counter_done <- 0
try({
write_csv(project_paper_edges,         paste0(clean.data.directory, "project_paper_edges_", i, ".csv"))
counter_done <- counter_done + 1
})
if (counter_done == 1){
file.remove(paste0(storage.data.directory, "link_file_"   , i, ".zip"))
print(paste("links download", i, "of", length(indices),  "done"))
} else {
print(paste("links download", i, "of", length(indices),  "failed********"))
}
return(NULL)
}
download_and_clean_data_projects <- function(i){
download.file(file_directory_projects[i], paste0(storage.data.directory, "project_file_", i, ".zip"))
project_clean_pre <- read_csv(paste0(storage.data.directory, "project_file_"   , i, ".zip")) %>%
dplyr::mutate(across(everything(), function(x) iconv(x, to = "UTF-8")))
if (is.null(project_clean_pre$INDIRECT_COST_AMT)) project_clean_pre$INDIRECT_COST_AMT <- NA
if (is.null(project_clean_pre$DIRECT_COST_AMT)) project_clean_pre$DIRECT_COST_AMT <- NA
if (is.null(project_clean_pre$TOTAL_COST)) project_clean_pre$TOTAL_COST <- NA
if (is.null(project_clean_pre$TOTAL_COST_SUB_PROJECT)) project_clean_pre$TOTAL_COST <- NA
if (is.null(project_clean_pre$ORG_IPF_CODE)) project_clean_pre$ORG_IPF_CODE <- NA
if (is.null(project_clean_pre$ORG_NAME)) project_clean_pre$ORG_NAME <- NA
if (is.null(project_clean_pre$ORG_CITY)) project_clean_pre$ORG_CITY <- NA
if (is.null(project_clean_pre$ORG_COUNTRY)) project_clean_pre$ORG_COUNTRY <- NA
if (is.null(project_clean_pre$PI_IDS)) project_clean_pre$PI_IDS <- NA
if (is.null(project_clean_pre$PI_NAMEs)) project_clean_pre$PI_NAMEs <- NA
if (is.null(project_clean_pre$CORE_PROJECT_NUM)) project_clean_pre$CORE_PROJECT_NUM <- NA
file_project <- project_clean_pre %>%
dplyr::mutate(SUBPROJECT_ID = ifelse(is.na(SUBPROJECT_ID), 0, SUBPROJECT_ID)) %>%
dplyr::mutate(id_project = paste(CORE_PROJECT_NUM, FY, SUBPROJECT_ID, sep = "_")) %>%
dplyr::mutate(title = PROJECT_TITLE,
year = FY,
indirect_cost = INDIRECT_COST_AMT,
direct_cost = DIRECT_COST_AMT,
total_cost = TOTAL_COST,
total_cost_subproject = TOTAL_COST_SUB_PROJECT,
id_organization = ORG_IPF_CODE,
name_organization = ORG_NAME,
city_organization = ORG_CITY,
city_country = ORG_COUNTRY,
id_investigator = PI_IDS,
name_investigator = PI_NAMEs,
core_project_number = CORE_PROJECT_NUM)
try({project_nodes                 <- get_project_nodes(file_project)})
try({project_sub_project_edges     <- get_project_sub_project_edges(file_project)})
try({investigator_info            <- get_investigator_info(file_project)})
try({investigator_nodes           <- get_investigator_nodes(investigator_info)})
try({investigator_project_edges   <- get_investigator_project_edges(investigator_info)})
try({organization_and_project_info <- get_organization_and_project_info(file_project)})
try({organization_nodes            <- get_organization_nodes(organization_and_project_info)})
try({organization_project_edges    <- get_organization_project_edges(organization_and_project_info)})
counter_done <- 0
try({
write_csv(project_nodes,              paste0(clean.data.directory, "project_nodes_",        i, ".csv"))
counter_done <- counter_done + 1
})
try({
write_csv(project_sub_project_edges,  paste0(clean.data.directory, "project_sub_project_edges_",        i, ".csv"))
counter_done <- counter_done + 1
})
try({
write_csv(organization_nodes,         paste0(clean.data.directory, "organization_nodes_",       i, ".csv"))
counter_done <- counter_done + 1
})
try({
write_csv(investigator_nodes,         paste0(clean.data.directory, "investigator_nodes_", i, ".csv"))
counter_done <- counter_done + 1
})
try({
write_csv(organization_project_edges,         paste0(clean.data.directory, "organization_project_edges_", i, ".csv"))
counter_done <- counter_done + 1
})
try({
write_csv(investigator_project_edges,         paste0(clean.data.directory, "investigator_project_edges_", i, ".csv"))
counter_done <- counter_done + 1
})
if (counter_done == 6){
file.remove(paste0(storage.data.directory, "project_file_", i, ".zip"))
print(paste("project download", i, "of", length(indices),  "done"))
} else {
print(paste("project download", i, "of", length(indices),  "failed********"))
}
return(NULL)
}
############ EXECUTE DOWNLOAD FUNCTIONS #################
indices <- seq_along(file_names_projects)
if (local) indices <- 1:10
for (i in indices){
download_and_clean_data_projects(i)
download_and_clean_data_links(i)
}
library(here)
library(tidyverse)
# WHICH SCRIPTS TO RUN?
download_pubmed     <- FALSE
download_funding    <- TRUE
download_citations  <- FALSE
clean_pubmed        <- FALSE
clean_funding       <- FALSE
prep_for_upload     <- FALSE
# CHOOSE FILEPATHS
local <- str_detect(here(), "keletsomakofane/Documents/")
if (local){
root.working.directory <- "/Users/keletsomakofane/Documents/_gitrepos/constellations/src/data_wrangling/"
root.data.directory    <- "/Users/keletsomakofane/Documents/_data/constellations/"
} else {
root.working.directory <- "~/shared_space/thesis_kem073/_gitrepos/constellations/src/data_wrangling/"
root.data.directory 	 <- "~/shared_space/kem073_proj/_data/constellations/"
}
# EXECUTE SCRIPTS
if (download_pubmed)    source(paste0(root.working.directory, "1_download_pubmed_data.R"), verbose = TRUE)
if (download_funding)   source(paste0(root.working.directory, "1_download_funding_data.R"), verbose = TRUE)
if (download_citations) source(paste0(root.working.directory, "1_download_citation_links_data.R"), verbose = TRUE)
if (clean_pubmed)       source(paste0(root.working.directory, "2_clean_pubmed_data.R"), verbose = TRUE)
if (clean_funding)      source(paste0(root.working.directory, "2_clean_funding_data.R"), verbose = TRUE)
if (prep_for_upload)    source(paste0(root.working.directory, "3_prep_data_for_upload.R"), verbose = TRUE)
library(here)
library(tidyverse)
# WHICH SCRIPTS TO RUN?
download_pubmed     <- FALSE
download_funding    <- TRUE
download_citations  <- FALSE
clean_pubmed        <- FALSE
clean_funding       <- TRUE
prep_for_upload     <- FALSE
# CHOOSE FILEPATHS
local <- str_detect(here(), "keletsomakofane/Documents/")
if (local){
root.working.directory <- "/Users/keletsomakofane/Documents/_gitrepos/constellations/src/data_wrangling/"
root.data.directory    <- "/Users/keletsomakofane/Documents/_data/constellations/"
} else {
root.working.directory <- "~/shared_space/thesis_kem073/_gitrepos/constellations/src/data_wrangling/"
root.data.directory 	 <- "~/shared_space/kem073_proj/_data/constellations/"
}
# EXECUTE SCRIPTS
if (download_pubmed)    source(paste0(root.working.directory, "1_download_pubmed_data.R"), verbose = TRUE)
if (download_funding)   source(paste0(root.working.directory, "1_download_funding_data.R"), verbose = TRUE)
if (download_citations) source(paste0(root.working.directory, "1_download_citation_links_data.R"), verbose = TRUE)
if (clean_pubmed)       source(paste0(root.working.directory, "2_clean_pubmed_data.R"), verbose = TRUE)
if (clean_funding)      source(paste0(root.working.directory, "2_clean_funding_data.R"), verbose = TRUE)
if (prep_for_upload)    source(paste0(root.working.directory, "3_prep_data_for_upload.R"), verbose = TRUE)
filenames_project_paper_edges <- filenames %>%
{.[str_detect(., "project_paper_edges")]} %>%
paste0(clean.data.directory, .)
filenames_project_subproject_edges <- filenames %>%
{.[str_detect(., "project_subproject_edges_")]} %>%
paste0(clean.data.directory, .)
if (file.exists(paste0(final.data.directory, "investigator_nodes.csv"))) unlink(paste0(final.data.directory, "investigator_nodes.csv"), recursive = FALSE)
for (i in seq_along(filenames_investigator_nodes)){
try({
a <- read_csv(filenames_investigator_nodes[i]) %>%
dplyr::mutate(id_investigator = as.numeric(id_investigator), name_investigator = trimws(as.character(name_investigator))) %>%
dplyr::filter(!is.na(id_investigator) & !is.na(name_investigator) & name_investigator != "") %>%
dplyr::mutate(id_investigator = paste0("inv_", id_investigator), name_investigator = trimws(as.character(name_investigator))) %>%
dplyr::group_by(id_investigator) %>%
dplyr::summarize(across(everything(), first)) %>%
dplyr::rename(`id:ID` = id_investigator, name = name_investigator) %>%
dplyr::mutate(`:LABEL` = "Investigator")
write_csv(a, paste0(final.data.directory, "investigator_nodes.csv"), append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "investigator_nodes_headers.csv"),  col_names= TRUE)
print(paste(i, "of", length(filenames_investigator_nodes), "investigator_nodes"))
})
}
if (file.exists(paste0(final.data.directory, "investigator_project_edges.csv"))) unlink(paste0(final.data.directory, "investigator_project_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_investigator_project_edges)){
try({
a <- read_csv(filenames_investigator_project_edges[i]) %>%
dplyr::mutate(across(everything(), function(x) ifelse(is.na(x), "", x))) %>%
dplyr::mutate(id_investigator = as.numeric(id_investigator), id_project = trimws(as.character(id_project))) %>%
dplyr::mutate(id_investigator = paste0("inv_", id_investigator), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_investigator) & !is.na(id_investigator) & id_investigator != "") %>%
dplyr::rename(`:START_ID` = id_investigator, `:END_ID` = id_project) %>%
dplyr::mutate(`:TYPE` = "LED")
write_csv(a, paste0(final.data.directory, "investigator_project_edges.csv"), append = (i != 1), col_names=FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "investigator_project_edges_headers.csv"),  col_names=TRUE)
print(paste(i, "of", length(filenames_investigator_project_edges), "investigator_project_edges"))
})
}
if (file.exists(paste0(final.data.directory, "organization_nodes.csv"))) unlink(paste0(final.data.directory, "organization_nodes.csv"), recursive = FALSE)
for (i in seq_along(filenames_organization_nodes)){
try({
a <- read_csv(filenames_organization_nodes[i]) %>%
dplyr::mutate(id_organization = as.numeric(id_organization)) %>%
dplyr::mutate(id_organization = paste0("org_", id_organization)) %>%
dplyr::group_by(id_organization) %>%
dplyr::summarize(across(everything(), first)) %>%
dplyr::filter(!is.na(id_organization)) %>%
dplyr::rename(`id:ID` = id_organization, name = name_organization, city = city_organization) %>%
dplyr::mutate(`:LABEL` = "Organization")
write_csv(a, paste0(final.data.directory, "organization_nodes.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "organization_nodes_headers.csv"), col_names= TRUE)
print(paste(i, "of", length(filenames_organization_nodes), "organization_nodes"))
})
}
if (file.exists(paste0(final.data.directory, "organization_project_edges.csv"))) unlink(paste0(final.data.directory, "organization_project_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_organization_project_edges)){
try({
a <- read_csv(filenames_organization_project_edges[i]) %>%
dplyr::mutate(id_organization = as.numeric(id_organization), id_project = trimws(as.character(id_project))) %>%
dplyr::mutate(id_organization = paste0("org_", id_organization), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_organization) & !is.na(id_project) & id_project != "") %>%
dplyr::rename(`:START_ID` = id_organization, `:END_ID` = id_project) %>%
dplyr::mutate(`:TYPE` = "HOSTED")
write_csv(a, paste0(final.data.directory, "organization_project_edges.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "organization_project_edges_headers.csv"),   col_names= TRUE)
print(paste(i, "of", length(filenames_organization_project_edges), "organization_project_edges"))
})
}
if (file.exists(paste0(final.data.directory, "project_nodes.csv"))) unlink(paste0(final.data.directory, "project_nodes.csv"), recursive = FALSE)
for (i in seq_along(filenames_project_nodes)){
try({
a <- read_csv(filenames_project_nodes[i]) %>%
dplyr::mutate(id_project = as.character(trimws(id_project))) %>%
dplyr::group_by(id_project) %>%
dplyr::summarise(across(everything(), first)) %>%
dplyr::filter(!is.na(id_project) & id_project != "") %>%
dplyr::rename(`id:ID` = id_project) %>%
dplyr::mutate(`:LABEL` = "Project")
write_csv(a, paste0(final.data.directory, "project_nodes.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "project_nodes_headers.csv"), col_names= TRUE)
print(paste(i, "of", length(filenames_project_nodes), "project_nodes"))
})
}
if (file.exists(paste0(final.data.directory, "project_paper_edges.csv"))) unlink(paste0(final.data.directory, "project_paper_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_project_paper_edges)){
try({
a <- read_csv(filenames_project_paper_edges[i]) %>%
dplyr::mutate(id_paper = as.numeric(id_paper), id_project = trimws(as.character(id_project))) %>%
dplyr::mutate(id_paper = paste0("pap_", id_paper), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_paper) & !is.na(id_project) & id_project != "") %>%
dplyr::rename(`:START_ID` = id_project, `:END_ID` = id_paper) %>%
dplyr::mutate(`:TYPE` = "SUPPORTED")
write_csv(a, paste0(final.data.directory, "project_paper_edges.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "project_paper_edges_headers.csv"),  col_names= TRUE)
print(paste(i, "of", length(filenames_project_paper_edges), "project_paper_edges"))
})
}
if (file.exists(paste0(final.data.directory, "project_subproject_edges.csv"))) unlink(paste0(final.data.directory, "project_subproject_edges.csv"), recursive = FALSE)
clean.data.directory      <- paste0(root.data.directory, "data_funding_clean/")
final.data.directory      <- paste0(root.data.directory, "import/")
filenames                 <- list.files(clean.data.directory)
filenames_investigator_nodes <- filenames %>%
{.[str_detect(., "investigator_nodes_")]} %>%
paste0(clean.data.directory, .)
filenames_investigator_project_edges <- filenames %>%
{.[str_detect(., "investigator_project_edges_")]} %>%
paste0(clean.data.directory, .)
filenames_organization_nodes <- filenames %>%
{.[str_detect(., "organization_nodes_")]} %>%
paste0(clean.data.directory, .)
filenames_organization_project_edges <- filenames %>%
{.[str_detect(., "organization_project_edges_")]} %>%
paste0(clean.data.directory, .)
filenames_project_nodes <- filenames %>%
{.[str_detect(., "project_nodes_")]} %>%
paste0(clean.data.directory, .)
filenames_project_paper_edges <- filenames %>%
{.[str_detect(., "project_paper_edges")]} %>%
paste0(clean.data.directory, .)
filenames_project_subproject_edges <- filenames %>%
{.[str_detect(., "project_subproject_edges_")]} %>%
paste0(clean.data.directory, .)
if (file.exists(paste0(final.data.directory, "investigator_nodes.csv"))) unlink(paste0(final.data.directory, "investigator_nodes.csv"), recursive = FALSE)
for (i in seq_along(filenames_investigator_nodes)){
try({
a <- read_csv(filenames_investigator_nodes[i]) %>%
dplyr::mutate(id_investigator = as.numeric(id_investigator), name_investigator = trimws(as.character(name_investigator))) %>%
dplyr::filter(!is.na(id_investigator) & !is.na(name_investigator) & name_investigator != "") %>%
dplyr::mutate(id_investigator = paste0("inv_", id_investigator), name_investigator = trimws(as.character(name_investigator))) %>%
dplyr::group_by(id_investigator) %>%
dplyr::summarize(across(everything(), first)) %>%
dplyr::rename(`id:ID` = id_investigator, name = name_investigator) %>%
dplyr::mutate(`:LABEL` = "Investigator")
write_csv(a, paste0(final.data.directory, "investigator_nodes.csv"), append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "investigator_nodes_headers.csv"),  col_names= TRUE)
print(paste(i, "of", length(filenames_investigator_nodes), "investigator_nodes"))
})
}
if (file.exists(paste0(final.data.directory, "investigator_project_edges.csv"))) unlink(paste0(final.data.directory, "investigator_project_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_investigator_project_edges)){
try({
a <- read_csv(filenames_investigator_project_edges[i]) %>%
dplyr::mutate(across(everything(), function(x) ifelse(is.na(x), "", x))) %>%
dplyr::mutate(id_investigator = as.numeric(id_investigator), id_project = trimws(as.character(id_project))) %>%
dplyr::mutate(id_investigator = paste0("inv_", id_investigator), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_investigator) & !is.na(id_investigator) & id_investigator != "") %>%
dplyr::rename(`:START_ID` = id_investigator, `:END_ID` = id_project) %>%
dplyr::mutate(`:TYPE` = "LED")
write_csv(a, paste0(final.data.directory, "investigator_project_edges.csv"), append = (i != 1), col_names=FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "investigator_project_edges_headers.csv"),  col_names=TRUE)
print(paste(i, "of", length(filenames_investigator_project_edges), "investigator_project_edges"))
})
}
if (file.exists(paste0(final.data.directory, "organization_nodes.csv"))) unlink(paste0(final.data.directory, "organization_nodes.csv"), recursive = FALSE)
for (i in seq_along(filenames_organization_nodes)){
try({
a <- read_csv(filenames_organization_nodes[i]) %>%
dplyr::mutate(id_organization = as.numeric(id_organization)) %>%
dplyr::mutate(id_organization = paste0("org_", id_organization)) %>%
dplyr::group_by(id_organization) %>%
dplyr::summarize(across(everything(), first)) %>%
dplyr::filter(!is.na(id_organization)) %>%
dplyr::rename(`id:ID` = id_organization, name = name_organization, city = city_organization) %>%
dplyr::mutate(`:LABEL` = "Organization")
write_csv(a, paste0(final.data.directory, "organization_nodes.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "organization_nodes_headers.csv"), col_names= TRUE)
print(paste(i, "of", length(filenames_organization_nodes), "organization_nodes"))
})
}
if (file.exists(paste0(final.data.directory, "organization_project_edges.csv"))) unlink(paste0(final.data.directory, "organization_project_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_organization_project_edges)){
try({
a <- read_csv(filenames_organization_project_edges[i]) %>%
dplyr::mutate(id_organization = as.numeric(id_organization), id_project = trimws(as.character(id_project))) %>%
dplyr::mutate(id_organization = paste0("org_", id_organization), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_organization) & !is.na(id_project) & id_project != "") %>%
dplyr::rename(`:START_ID` = id_organization, `:END_ID` = id_project) %>%
dplyr::mutate(`:TYPE` = "HOSTED")
write_csv(a, paste0(final.data.directory, "organization_project_edges.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "organization_project_edges_headers.csv"),   col_names= TRUE)
print(paste(i, "of", length(filenames_organization_project_edges), "organization_project_edges"))
})
}
if (file.exists(paste0(final.data.directory, "project_nodes.csv"))) unlink(paste0(final.data.directory, "project_nodes.csv"), recursive = FALSE)
for (i in seq_along(filenames_project_nodes)){
try({
a <- read_csv(filenames_project_nodes[i]) %>%
dplyr::mutate(id_project = as.character(trimws(id_project))) %>%
dplyr::group_by(id_project) %>%
dplyr::summarise(across(everything(), first)) %>%
dplyr::filter(!is.na(id_project) & id_project != "") %>%
dplyr::rename(`id:ID` = id_project) %>%
dplyr::mutate(`:LABEL` = "Project")
write_csv(a, paste0(final.data.directory, "project_nodes.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "project_nodes_headers.csv"), col_names= TRUE)
print(paste(i, "of", length(filenames_project_nodes), "project_nodes"))
})
}
if (file.exists(paste0(final.data.directory, "project_paper_edges.csv"))) unlink(paste0(final.data.directory, "project_paper_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_project_paper_edges)){
try({
a <- read_csv(filenames_project_paper_edges[i]) %>%
dplyr::mutate(id_paper = as.numeric(id_paper), id_project = trimws(as.character(id_project))) %>%
dplyr::mutate(id_paper = paste0("pap_", id_paper), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_paper) & !is.na(id_project) & id_project != "") %>%
dplyr::rename(`:START_ID` = id_project, `:END_ID` = id_paper) %>%
dplyr::mutate(`:TYPE` = "SUPPORTED")
write_csv(a, paste0(final.data.directory, "project_paper_edges.csv"),  append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "project_paper_edges_headers.csv"),  col_names= TRUE)
print(paste(i, "of", length(filenames_project_paper_edges), "project_paper_edges"))
})
}
if (file.exists(paste0(final.data.directory, "project_subproject_edges.csv"))) unlink(paste0(final.data.directory, "project_subproject_edges.csv"), recursive = FALSE)
for (i in seq_along(filenames_project_subproject_edges)){
try({
a <- read_csv(filenames_project_subproject_edges[i]) %>%
dplyr::mutate(id_project = trimws(as.character(id_project)), id_subproject = trimws(as.character(id_subproject))) %>%
dplyr::filter(!is.na(id_project) & !is.na(id_subproject)) %>%
dplyr::rename(`:START_ID` = id_project, `:END_ID` = id_subproject) %>%
dplyr::mutate(`:TYPE` = "BEGAT")
write_csv(a, paste0(final.data.directory, "project_subproject_edges.csv"), append = (i != 1), col_names= FALSE)
write_csv(a %>% filter(FALSE), paste0(final.data.directory, "project_subproject_edges_headers.csv"),  col_names= TRUE)
print(paste(i, "of", length(filenames_project_subproject_edges), "project_subproject_edges"))
})
}
if (file.exists(paste0(final.data.directory, "project_paper_edges.csv"))) unlink(paste0(final.data.directory, "project_paper_edges.csv"), recursive = FALSE)
try({
a <- read_csv(paste0(clean.data.directory, "project_paper_edges.csv")) %>%
dplyr::mutate(across(everything(), as.character)) %>%
dplyr::mutate(id_paper = as.numeric(id_paper), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_paper) & !is.na(id_project) & id_project != "")
write_csv(a, paste0(final.data.directory, "project_paper_edges.csv"))
})
a <- read_csv(filenames_project_paper_edges[i]) %>%
dplyr::mutate(across(everything(), as.character)) %>%
dplyr::mutate(id_paper = as.numeric(id_paper), id_project = trimws(as.character(id_project))) %>%
dplyr::filter(!is.na(id_paper) & !is.na(id_project) & id_project != "")
a
dir.create(storage.data.directory)
library(here)
library(tidyverse)
# WHICH SCRIPTS TO RUN?
download_pubmed     <- FALSE
download_funding    <- TRUE
download_citations  <- FALSE
clean_pubmed        <- FALSE
clean_funding       <- TRUE
prep_for_upload     <- FALSE
# CHOOSE FILEPATHS
local <- str_detect(here(), "keletsomakofane/Documents/")
if (local){
root.working.directory <- "/Users/keletsomakofane/Documents/_gitrepos/constellations/src/data_wrangling/"
root.data.directory    <- "/Users/keletsomakofane/Documents/_data/constellations/"
} else {
root.working.directory <- "~/shared_space/thesis_kem073/_gitrepos/constellations/src/data_wrangling/"
root.data.directory 	 <- "~/shared_space/kem073_proj/_data/constellations/"
}
library(here)
library(tidyverse)
# WHICH SCRIPTS TO RUN?
download_pubmed     <- FALSE
download_funding    <- TRUE
download_citations  <- FALSE
clean_pubmed        <- FALSE
clean_funding       <- TRUE
prep_for_upload     <- FALSE
# CHOOSE FILEPATHS
local <- str_detect(here(), "keletsomakofane/Documents/")
if (local){
root.working.directory <- "/Users/keletsomakofane/Documents/_gitrepos/constellations/src/data_wrangling/"
root.data.directory    <- "/Users/keletsomakofane/Documents/_data/constellations/"
} else {
root.working.directory <- "~/shared_space/thesis_kem073/_gitrepos/constellations/src/data_wrangling/"
root.data.directory 	 <- "~/shared_space/kem073_proj/_data/constellations/"
}
dir.create(clean.data.directory)
############ UTITLITY FUNCTIONS #################
first_valid <- function(vec){
if (all(is.na(vec))) return(NA)
vec[!is.na(vec)][1]
}
strip_linebreaks <- function(text){
text %>% str_replace_all("[:blank:]"," ") %>% str_replace_all("[:space:]"," ")
}
############## URLS ###############
exporter_projects    <- "https://exporter.nih.gov/ExPORTER_Catalog.aspx?sid=0&index=0"
exporter_linktable   <- "https://exporter.nih.gov/ExPORTER_Catalog.aspx?sid=0&index=5"
storage.data.directory    <- paste0(root.data.directory, "data_funding_raw/")
clean.data.directory      <- paste0(root.data.directory, "data_funding_clean/")
dir.create(storage.data.directory)
dir.create(clean.data.directory)
unlink(storage.data.directory, recursive = FALSE)
unlink(storage.data.directory, recursive = FALSE)
unlink(storage.data.directory, recursive = FALSE)
unlink(storage.data.directory, recursive = TRUE)
unlink(storage.data.directory, recursive = TRUE)
clean.data.directory      <- paste0(root.data.directory, "data_funding_clean/")
clean.data.directory
?unlink
file.remove(storage.data.directory, recursive = TRUE)
file.remove(clean.data.directory, recursive = TRUE)
file.remove(storage.data.directory, recursive = TRUE, force = TRUE)
file.remove(clean.data.directory, recursive = TRUE, force = TRUE)
?file.remove
unlink(clean.data.directory, recursive = TRUE, force = TRUE)
dir.create(storage.data.directory)
dir.create(clean.data.directory)
library(here)
library(tidyverse)
# WHICH SCRIPTS TO RUN?
download_pubmed     <- FALSE
download_funding    <- TRUE
download_citations  <- FALSE
clean_pubmed        <- FALSE
clean_funding       <- TRUE
prep_for_upload     <- FALSE
# CHOOSE FILEPATHS
local <- str_detect(here(), "keletsomakofane/Documents/")
if (local){
root.working.directory <- "/Users/keletsomakofane/Documents/_gitrepos/constellations/src/data_wrangling/"
root.data.directory    <- "/Users/keletsomakofane/Documents/_data/constellations/"
} else {
root.working.directory <- "~/shared_space/thesis_kem073/_gitrepos/constellations/src/data_wrangling/"
root.data.directory 	 <- "~/shared_space/kem073_proj/_data/constellations/"
}
# EXECUTE SCRIPTS
if (download_pubmed)    source(paste0(root.working.directory, "1_download_pubmed_data.R"), verbose = TRUE)
if (download_funding)   source(paste0(root.working.directory, "1_download_funding_data.R"), verbose = TRUE)
if (download_citations) source(paste0(root.working.directory, "1_download_citation_links_data.R"), verbose = TRUE)
if (clean_pubmed)       source(paste0(root.working.directory, "2_clean_pubmed_data.R"), verbose = TRUE)
if (clean_funding)      source(paste0(root.working.directory, "2_clean_funding_data.R"), verbose = TRUE)
if (prep_for_upload)    source(paste0(root.working.directory, "3_prep_data_for_upload.R"), verbose = TRUE)
